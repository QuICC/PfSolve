//general parts
#include <stdio.h>
#include <vector>
#include <memory>
#include <string.h>
#include <chrono>
#include <thread>
#include <iostream>
#ifndef __STDC_FORMAT_MACROS
#define __STDC_FORMAT_MACROS
#endif
#include <inttypes.h>
//#define USE_MPIR
#if(VKFFT_BACKEND==0)
#include "vulkan/vulkan.h"
#include "glslang_c_interface.h"
#elif(VKFFT_BACKEND==1)
#include <cuda.h>
#include <cuda_runtime.h>
#include <nvrtc.h>
#include <cuda_runtime_api.h>
#include <cuComplex.h>
//#include <cuSparse.h>
#elif(VKFFT_BACKEND==2)
#ifndef __HIP_PLATFORM_HCC__
#define __HIP_PLATFORM_HCC__
#endif
#include <hip/hip_runtime.h>
#include <hip/hiprtc.h>
#include <hip/hip_runtime_api.h>
#include <hip/hip_complex.h>
#elif(VKFFT_BACKEND==3)
#ifndef CL_USE_DEPRECATED_OPENCL_1_2_APIS
#define CL_USE_DEPRECATED_OPENCL_1_2_APIS
#endif
#ifdef __APPLE__
#include <OpenCL/opencl.h>
#else
#include <CL/cl.h>
#endif 
#endif
#include "pfSolve.h"
#include "utils_VkFFT.h"
#ifdef USE_MPIR
#include <mpir.h>
#endif
double a0[513] = {-4.43990665553296083e+66,
6.92393441736712553e-04,
1.69435153765214196e-03,
2.67638687443199925e-03,
3.65307053769060083e-03,
4.62659510487481614e-03,
5.59762515662798246e-03,
6.56643366402889350e-03,
7.53315528456920732e-03,
8.49786553342668678e-03,
9.46061114464685424e-03,
1.04214234626938702e-02,
1.13803249881278615e-02,
1.23373328401808688e-02,
1.32924607072767483e-02,
1.42457200036446834e-02,
1.51971205851101458e-02,
1.61466712083942823e-02,
1.70943798351243653e-02,
1.80402538385555124e-02,
1.89843001474992792e-02,
1.99265253486496131e-02,
2.08669357606996939e-02,
2.18055374889316693e-02,
2.27423364660359964e-02,
2.36773384830559208e-02,
2.46105492131417809e-02,
2.55419742299971310e-02,
2.64716190223556400e-02,
2.73994890054553158e-02,
2.83255895302164905e-02,
2.92499258906463722e-02,
3.01725033298608884e-02,
3.10933270450195059e-02,
3.20124021913983092e-02,
3.29297338857747895e-02,
3.38453272092591809e-02,
3.47591872096775223e-02,
3.56713189035895856e-02,
3.65817272780075420e-02,
3.74904172918678891e-02,
3.83973938772991311e-02,
3.93026619407191510e-02,
4.02062263637903150e-02,
4.11080920042547690e-02,
4.20082636966688308e-02,
4.29067462530516447e-02,
4.38035444634610124e-02,
4.46986630965068993e-02,
4.55921068998116352e-02,
4.64838806004240768e-02,
4.73739889051941546e-02,
4.82624365011130665e-02,
4.91492280556236269e-02,
5.00343682169045317e-02,
5.09178616141319068e-02,
5.17997128577209198e-02,
5.26799265395498720e-02,
5.35585072331687326e-02,
5.44354594939940872e-02,
5.53107878594919292e-02,
5.61844968493496813e-02,
5.70565909656386844e-02,
5.79270746929679628e-02,
5.87959524986305035e-02,
5.96632288327425264e-02,
6.05289081283765656e-02,
6.13929948016890201e-02,
6.22554932520426110e-02,
6.31164078621242464e-02,
6.39757429980588183e-02,
6.48335030095190806e-02,
6.56896922298322306e-02,
6.65443149760831937e-02,
6.73973755492150856e-02,
6.82488782341270639e-02,
6.90988272997696273e-02,
6.99472269992377771e-02,
7.07940815698619719e-02,
7.16393952332972928e-02,
7.24831721956107206e-02,
7.33254166473667063e-02,
7.41661327637113121e-02,
7.50053247044547983e-02,
7.58429966141529188e-02,
7.66791526221868580e-02,
7.75137968428420421e-02,
7.83469333753857994e-02,
7.91785663041439242e-02,
8.00086996985761856e-02,
8.08373376133511012e-02,
8.16644840884194895e-02,
8.24901431490873971e-02,
8.33143188060880835e-02,
8.41370150556531721e-02,
8.49582358795833020e-02,
8.57779852453177949e-02,
8.65962671060036271e-02,
8.74130854005639585e-02,
8.82284440537658976e-02,
8.90423469762875314e-02,
8.98547980647844968e-02,
9.06658012019561227e-02,
9.14753602566106411e-02,
9.22834790837301355e-02,
9.30901615245349201e-02,
9.38954114065474049e-02,
9.46992325436553373e-02,
9.55016287361748345e-02,
9.63026037709126120e-02,
9.71021614212281142e-02,
9.79003054470948264e-02,
9.86970395951614482e-02,
9.94923675988125256e-02,
1.00286293178228625e-01,
1.01078820040446146e-01,
1.01869951879416776e-01,
1.02659692376066411e-01,
1.03448045198353877e-01,
1.04235014001329146e-01,
1.05020602427191148e-01,
1.05804814105345354e-01,
1.06587652652460896e-01,
1.07369121672527337e-01,
1.08149224756911091e-01,
1.08927965484411554e-01,
1.09705347421316990e-01,
1.10481374121459544e-01,
1.11256049126270740e-01,
1.12029375964836087e-01,
1.12801358153949469e-01,
1.13571999198167350e-01,
1.14341302589862484e-01,
1.15109271809277450e-01,
1.15875910324577877e-01,
1.16641221591905250e-01,
1.17405209055429477e-01,
1.18167876147401263e-01,
1.18929226288204001e-01,
1.19689262886405481e-01,
1.20447989338809361e-01,
1.21205409030506167e-01,
1.21961525334924215e-01,
1.22716341613880092e-01,
1.23469861217629082e-01,
1.24222087484914909e-01,
1.24973023743019690e-01,
1.25722673307813337e-01,
1.26471039483802561e-01,
1.27218125564180135e-01,
1.27963934830873233e-01,
1.28708470554591947e-01,
1.29451735994877415e-01,
1.30193734400149780e-01,
1.30934469007755599e-01,
1.31673943044015529e-01,
1.32412159724271034e-01,
1.33149122252931656e-01,
1.33884833823521343e-01,
1.34619297618724987e-01,
1.35352516810434392e-01,
1.36084494559794489e-01,
1.36815234017248488e-01,
1.37544738322583765e-01,
1.38273010604976709e-01,
1.39000053983037802e-01,
1.39725871564856302e-01,
1.40450466448044708e-01,
1.41173841719782950e-01,
1.41896000456862487e-01,
1.42616945725730054e-01,
1.43336680582531212e-01,
1.44055208073153640e-01,
1.44772531233270357e-01,
1.45488653088382464e-01,
1.46203576653862050e-01,
1.46917304934994275e-01,
1.47629840927020028e-01,
1.48341187615177617e-01,
1.49051347974744813e-01,
1.49760324971080272e-01,
1.50468121559664936e-01,
1.51174740686143366e-01,
1.51880185286364489e-01,
1.52584458286422586e-01,
1.53287562602697602e-01,
1.53989501141895663e-01,
1.54690276801089210e-01,
1.55389892467756835e-01,
1.56088351019823185e-01,
1.56785655325698298e-01,
1.57481808244317151e-01,
1.58176812625178687e-01,
1.58870671308384864e-01,
1.59563387124679268e-01,
1.60254962895485797e-01,
1.60945401432946944e-01,
1.61634705539962176e-01,
1.62322878010225602e-01,
1.63009921628264082e-01,
1.63695839169474666e-01,
1.64380633400162096e-01,
1.65064307077575967e-01,
1.65746862949948004e-01,
1.66428303756528617e-01,
1.67108632227623788e-01,
1.67787851084631623e-01,
1.68465963040078576e-01,
1.69142970797655751e-01,
1.69818877052254597e-01,
1.70493684490003045e-01,
1.71167395788300897e-01,
1.71840013615855436e-01,
1.72511540632716592e-01,
1.73181979490311999e-01,
1.73851332831482186e-01,
1.74519603290515052e-01,
1.75186793493180615e-01,
1.75852906056765401e-01,
1.76517943590106696e-01,
1.77181908693626600e-01,
1.77844803959366027e-01,
1.78506631971018515e-01,
1.79167395303963584e-01,
1.79827096525300434e-01,
1.80485738193881168e-01,
1.81143322860343653e-01,
1.81799853067144912e-01,
1.82455331348593486e-01,
1.83109760230882296e-01,
1.83763142232121174e-01,
1.84415479862369003e-01,
1.85066775623665997e-01,
1.85717032010065675e-01,
1.86366251507666780e-01,
1.87014436594644895e-01,
1.87661589741284107e-01,
1.88307713410008182e-01,
1.88952810055412118e-01,
1.89596882124293126e-01,
1.90239932055681404e-01,
1.90881962280871231e-01,
1.91522975223451519e-01,
1.92162973299336265e-01,
1.92801958916794886e-01,
1.93439934476482556e-01,
1.94076902371470461e-01,
1.94712864987275136e-01,
1.95347824701888967e-01,
1.95981783885809391e-01,
1.96614744902068622e-01,
1.97246710106262851e-01,
1.97877681846581638e-01,
1.98507662463836942e-01,
1.99136654291492188e-01,
1.99764659655690791e-01,
2.00391680875285222e-01,
2.01017720261865401e-01,
2.01642780119786952e-01,
2.02266862746199705e-01,
2.02889970431075872e-01,
2.03512105457237913e-01,
2.04133270100386371e-01,
2.04753466629127995e-01,
2.05372697305002988e-01,
2.05990964382512604e-01,
2.06608270109146536e-01,
2.07224616725410399e-01,
2.07840006464852373e-01,
2.08454441554090486e-01,
2.09067924212839679e-01,
2.09680456653937947e-01,
2.10292041083373599e-01,
2.10902679700311374e-01,
2.11512374697118755e-01,
2.12121128259392555e-01,
2.12728942565984736e-01,
2.13335819789028602e-01,
2.13941762093964455e-01,
2.14546771639565592e-01,
2.15150850577963987e-01,
2.15754001054675404e-01,
2.16356225208625269e-01,
2.16957525172173815e-01,
2.17557903071141118e-01,
2.18157361024832325e-01,
2.18755901146062470e-01,
2.19353525541181371e-01,
2.19950236310098440e-01,
2.20546035546307140e-01,
2.21140925336909405e-01,
2.21734907762640265e-01,
2.22327984897891878e-01,
2.22920158810737901e-01,
2.23511431562957330e-01,
2.24101805210058486e-01,
2.24691281801302795e-01,
2.25279863379728884e-01,
2.25867551982175618e-01,
2.26454349639305885e-01,
2.27040258375630105e-01,
2.27625280209529185e-01,
2.28209417153278166e-01,
2.28792671213068843e-01,
2.29375044389032889e-01,
2.29956538675264971e-01,
2.30537156059844955e-01,
2.31116898524861364e-01,
2.31695768046433076e-01,
2.32273766594732506e-01,
2.32850896134007362e-01,
2.33427158622603437e-01,
2.34002556012986473e-01,
2.34577090251763959e-01,
2.35150763279707797e-01,
2.35723577031775544e-01,
2.36295533437132388e-01,
2.36866634419172634e-01,
2.37436881895541796e-01,
2.38006277778157360e-01,
2.38574823973230543e-01,
2.39142522381287664e-01,
2.39709374897191047e-01,
2.40275383410160248e-01,
2.40840549803793130e-01,
2.41404875956086368e-01,
2.41968363739456932e-01,
2.42531015020762186e-01,
2.43092831661320702e-01,
2.43653815516933020e-01,
2.44213968437901635e-01,
2.44773292269051757e-01,
2.45331788849751320e-01,
2.45889460013931277e-01,
2.46446307590105690e-01,
2.47002333401391466e-01,
2.47557539265528537e-01,
2.48111926994899729e-01,
2.48665498396550083e-01,
2.49218255272206868e-01,
2.49770199418298949e-01,
2.50321332625976389e-01,
2.50871656681129651e-01,
2.51421173364409167e-01,
2.51969884451244019e-01,
2.52517791711861728e-01,
2.53064896911306847e-01,
2.53611201809459952e-01,
2.54156708161056677e-01,
2.54701417715706535e-01,
2.55245332217911236e-01,
2.55788453407083949e-01,
2.56330783017567121e-01,
2.56872322778651518e-01,
2.57413074414594378e-01,
2.57953039644637783e-01,
2.58492220183026644e-01,
2.59030617739027136e-01,
2.59568234016944732e-01,
2.60105070716142028e-01,
2.60641129531056615e-01,
2.61176412151219284e-01,
2.61710920261271296e-01,
2.62244655540982308e-01,
2.62777619665268081e-01,
2.63309814304207690e-01,
2.63841241123061343e-01,
2.64371901782287200e-01,
2.64901797937559524e-01,
2.65430931239784895e-01,
2.65959303335120134e-01,
2.66486915864989127e-01,
2.67013770466099476e-01,
2.67539868770460210e-01,
2.68065212405397824e-01,
2.68589802993573490e-01,
2.69113642152999655e-01,
2.69636731497056970e-01,
2.70159072634510056e-01,
2.70680667169524991e-01,
2.71201516701685186e-01,
2.71721622826007592e-01,
2.72240987132959467e-01,
2.72759611208474251e-01,
2.73277496633967665e-01,
2.73794644986354141e-01,
2.74311057838062422e-01,
2.74826736757051826e-01,
2.75341683306827789e-01,
2.75855899046458020e-01,
2.76369385530587930e-01,
2.76882144309456568e-01,
2.77394176928912051e-01,
2.77905484930426883e-01,
2.78416069851114223e-01,
2.78925933223742151e-01,
2.79435076576750041e-01,
2.79943501434263164e-01,
2.80451209316108230e-01,
2.80958201737828317e-01,
2.81464480210698142e-01,
2.81970046241739158e-01,
2.82474901333734096e-01,
2.82979046985242066e-01,
2.83482484690613767e-01,
2.83985215940005697e-01,
2.84487242219394976e-01,
2.84988565010594330e-01,
2.85489185791266309e-01,
2.85989106034937879e-01,
2.86488327211015026e-01,
2.86986850784796965e-01,
2.87484678217490519e-01,
2.87981810966224605e-01,
2.88478250484064280e-01,
2.88973998220024675e-01,
2.89469055619085702e-01,
2.89963424122205160e-01,
2.90457105166333995e-01,
2.90950100184428906e-01,
2.91442410605466995e-01,
2.91934037854459538e-01,
2.92424983352465306e-01,
2.92915248516604887e-01,
2.93404834760073618e-01,
2.93893743492155635e-01,
2.94381976118237354e-01,
2.94869534039820913e-01,
2.95356418654537212e-01,
2.95842631356159957e-01,
2.96328173534618433e-01,
2.96813046576010653e-01,
2.97297251862617351e-01,
2.97780790772914083e-01,
2.98263664681584828e-01,
2.98745874959535529e-01,
2.99227422973905754e-01,
2.99708310088082908e-01,
3.00188537661714328e-01,
3.00668107050720446e-01,
3.01147019607307387e-01,
3.01625276679979681e-01,
3.02102879613553255e-01,
3.02579829749167362e-01,
3.03056128424297910e-01,
3.03531776972769396e-01,
3.04006776724767502e-01,
3.04481129006851647e-01,
3.04954835141967251e-01,
3.05427896449457892e-01,
3.05900314245077853e-01,
3.06372089841003892e-01,
3.06843224545848003e-01,
3.07313719664668750e-01,
3.07783576498984079e-01,
3.08252796346782765e-01,
3.08721380502536724e-01,
3.09189330257212514e-01,
3.09656646898283761e-01,
3.10123331709742267e-01,
3.10589385972110499e-01,
3.11054810962452799e-01,
3.11519607954387101e-01,
3.11983778218096808e-01,
3.12447323020342116e-01,
3.12910243624471618e-01,
3.13372541290433904e-01,
3.13834217274788663e-01,
3.14295272830718397e-01,
3.14755709208039802e-01,
3.15215527653214533e-01,
3.15674729409361254e-01,
3.16133315716265961e-01,
3.16591287810393807e-01,
3.17048646924900257e-01,
3.17505394289641418e-01,
3.17961531131185804e-01,
3.18417058672824993e-01,
3.18871978134584677e-01,
3.19326290733235374e-01,
3.19779997682303641e-01,
3.20233100192082287e-01,
3.20685599469641702e-01,
3.21137496718840454e-01,
3.21588793140335671e-01,
3.22039489931594036e-01,
3.22489588286902051e-01,
3.22939089397376922e-01,
3.23387994450976768e-01,
3.23836304632511229e-01,
3.24284021123652066e-01,
3.24731145102943097e-01,
3.25177677745811022e-01,
3.25623620224575139e-01,
3.26068973708458443e-01,
3.26513739363597011e-01,
3.26957918353050714e-01,
3.27401511836813264e-01,
3.27844520971821762e-01,
3.28286946911967692e-01,
3.28728790808106242e-01,
3.29170053808066632e-01,
3.29610737056661940e-01,
3.30050841695698649e-01,
3.30490368863987360e-01,
3.30929319697351731e-01,
3.31367695328638801e-01,
3.31805496887728590e-01,
3.32242725501543490e-01,
3.32679382294058745e-01,
3.33115468386311231e-01,
3.33550984896409330e-01,
3.33985932939542762e-01};
double b0[513] = {
	1.00000023970442520e+00,
1.00000119571194523e+00,
1.00000214612285432e+00,
1.00000309097529749e+00,
1.00000403030710427e+00,
1.00000496415578777e+00,
1.00000589255854999e+00,
1.00000681555228632e+00,
1.00000773317358393e+00,
1.00000864545873025e+00,
1.00000955244371315e+00,
1.00001045416422296e+00,
1.00001135065565894e+00,
1.00001224195312788e+00,
1.00001312809144971e+00,
1.00001400910516058e+00,
1.00001488502851399e+00,
1.00001575589548342e+00,
1.00001662173976769e+00,
1.00001748259479117e+00,
1.00001833849370647e+00,
1.00001918946939927e+00,
1.00002003555448860e+00,
1.00002087678133034e+00,
1.00002171318201927e+00,
1.00002254478839370e+00,
1.00002337163203459e+00,
1.00002419374427021e+00,
1.00002501115617859e+00,
1.00002582389858952e+00,
1.00002663200208541e+00,
1.00002743549700690e+00,
1.00002823441345279e+00,
1.00002902878128208e+00,
1.00002981863011842e+00,
1.00003060398935006e+00,
1.00003138488813348e+00,
1.00003216135539508e+00,
1.00003293341983346e+00,
1.00003370110992162e+00,
1.00003446445390876e+00,
1.00003522347982265e+00,
1.00003597821547241e+00,
1.00003672868844928e+00,
1.00003747492612893e+00,
1.00003821695567430e+00,
1.00003895480403671e+00,
1.00003968849795899e+00,
1.00004041806397526e+00,
1.00004114352841600e+00,
1.00004186491740610e+00,
1.00004258225687059e+00,
1.00004329557253402e+00,
1.00004400488992307e+00,
1.00004471023436814e+00,
1.00004541163100580e+00,
1.00004610910477942e+00,
1.00004680268044255e+00,
1.00004749238255952e+00,
1.00004817823550618e+00,
1.00004886026347428e+00,
1.00004953849047173e+00,
1.00005021294032304e+00,
1.00005088363667305e+00,
1.00005155060298767e+00,
1.00005221386255516e+00,
1.00005287343848837e+00,
1.00005352935372649e+00,
1.00005418163103510e+00,
1.00005483029300968e+00,
1.00005547536207606e+00,
1.00005611686049178e+00,
1.00005675481034872e+00,
1.00005738923357335e+00,
1.00005802015192824e+00,
1.00005864758701524e+00,
1.00005927156027408e+00,
1.00005989209298685e+00,
1.00006050920627643e+00,
1.00006112292111093e+00,
1.00006173325830217e+00,
1.00006234023850982e+00,
1.00006294388223926e+00,
1.00006354420984755e+00,
1.00006414124154008e+00,
1.00006473499737480e+00,
1.00006532549726290e+00,
1.00006591276096968e+00,
1.00006649680811632e+00,
1.00006707765818015e+00,
1.00006765533049746e+00,
1.00006822984426402e+00,
1.00006880121853503e+00,
1.00006936947222869e+00,
1.00006993462412530e+00,
1.00007049669286996e+00,
1.00007105569697252e+00,
1.00007161165480984e+00,
1.00007216458462600e+00,
1.00007271450453494e+00,
1.00007326143251896e+00,
1.00007380538643242e+00,
1.00007434638400095e+00,
1.00007488444282422e+00,
1.00007541958037605e+00,
1.00007595181400566e+00,
1.00007648116093839e+00,
1.00007700763827723e+00,
1.00007753126300303e+00,
1.00007805205197764e+00,
1.00007857002194256e+00,
1.00007908518952093e+00,
1.00007959757121800e+00,
1.00008010718342355e+00,
1.00008061404241166e+00,
1.00008111816434120e+00,
1.00008161956525798e+00,
1.00008211826109528e+00,
1.00008261426767509e+00,
1.00008310760070773e+00,
1.00008359827579474e+00,
1.00008408630842816e+00,
1.00008457171399168e+00,
1.00008505450776375e+00,
1.00008553470491424e+00,
1.00008601232050909e+00,
1.00008648736950967e+00,
1.00008695986677365e+00,
1.00008742982705590e+00,
1.00008789726500913e+00,
1.00008836219518571e+00,
1.00008882463203719e+00,
1.00008928458991631e+00,
1.00008974208307633e+00,
1.00009019712567393e+00,
1.00009064973176764e+00,
1.00009109991532030e+00,
1.00009154769019992e+00,
1.00009199307017882e+00,
1.00009243606893561e+00,
1.00009287670005720e+00,
1.00009331497703613e+00,
1.00009375091327479e+00,
1.00009418452208365e+00,
1.00009461581668457e+00,
1.00009504481020817e+00,
1.00009547151569733e+00,
1.00009589594610726e+00,
1.00009631811430499e+00,
1.00009673803307253e+00,
1.00009715571510349e+00,
1.00009757117300890e+00,
1.00009798441931297e+00,
1.00009839546645862e+00,
1.00009880432680265e+00,
1.00009921101262234e+00,
1.00009961553611104e+00,
1.00010001790938063e+00,
1.00010041814446460e+00,
1.00010081625331404e+00,
1.00010121224780235e+00,
1.00010160613972365e+00,
1.00010199794079413e+00,
1.00010238766265203e+00,
1.00010277531686009e+00,
1.00010316091490270e+00,
1.00010354446819072e+00,
1.00010392598805820e+00,
1.00010430548576634e+00,
1.00010468297250110e+00,
1.00010505845937558e+00,
1.00010543195743051e+00,
1.00010580347763378e+00,
1.00010617303088267e+00,
1.00010654062800142e+00,
1.00010690627974652e+00,
1.00010726999680211e+00,
1.00010763178978346e+00,
1.00010799166923792e+00,
1.00010834964564355e+00,
1.00010870572941091e+00,
1.00010905993088306e+00,
1.00010941226033623e+00,
1.00010976272798002e+00,
1.00011011134395944e+00,
1.00011045811835309e+00,
1.00011080306117450e+00,
1.00011114618237440e+00,
1.00011148749183776e+00,
1.00011182699938805e+00,
1.00011216471478481e+00,
1.00011250064772561e+00,
1.00011283480784519e+00,
1.00011316720471855e+00,
1.00011349784785830e+00,
1.00011382674671734e+00,
1.00011415391068792e+00,
1.00011447934910280e+00,
1.00011480307123590e+00,
1.00011512508630274e+00,
1.00011544540345931e+00,
1.00011576403180502e+00,
1.00011608098038107e+00,
1.00011639625817206e+00,
1.00011670987410639e+00,
1.00011702183705498e+00,
1.00011733215583498e+00,
1.00011764083920629e+00,
1.00011794789587527e+00,
1.00011825333449300e+00,
1.00011855716365727e+00,
1.00011885939191147e+00,
1.00011916002774570e+00,
1.00011945907959743e+00,
1.00011975655585239e+00,
1.00012005246484215e+00,
1.00012034681484852e+00,
1.00012063961410091e+00,
1.00012093087077814e+00,
1.00012122059300856e+00,
1.00012150878886930e+00,
1.00012179546638880e+00,
1.00012208063354535e+00,
1.00012236429826862e+00,
1.00012264646843851e+00,
1.00012292715188744e+00,
1.00012320635639917e+00,
1.00012348408970997e+00,
1.00012376035950878e+00,
1.00012403517343706e+00,
1.00012430853909029e+00,
1.00012458046401664e+00,
1.00012485095571879e+00,
1.00012512002165388e+00,
1.00012538766923353e+00,
1.00012565390582342e+00,
1.00012591873874612e+00,
1.00012618217527849e+00,
1.00012644422265362e+00,
1.00012670488806110e+00,
1.00012696417864655e+00,
1.00012722210151339e+00,
1.00012747866372087e+00,
1.00012773387228648e+00,
1.00012798773418532e+00,
1.00012824025635050e+00,
1.00012849144567384e+00,
1.00012874130900498e+00,
1.00012898985315291e+00,
1.00012923708488688e+00,
1.00012948301093330e+00,
1.00012972763798058e+00,
1.00012997097267631e+00,
1.00013021302162808e+00,
1.00013045379140486e+00,
1.00013069328853654e+00,
1.00013093151951327e+00,
1.00013116849078765e+00,
1.00013140420877322e+00,
1.00013163867984622e+00,
1.00013187191034469e+00,
1.00013210390656937e+00,
1.00013233467478346e+00,
1.00013256422121399e+00,
1.00013279255205045e+00,
1.00013301967344614e+00,
1.00013324559151817e+00,
1.00013347031234789e+00,
1.00013369384198092e+00,
1.00013391618642711e+00,
1.00013413735166146e+00,
1.00013435734362366e+00,
1.00013457616821899e+00,
1.00013479383131809e+00,
1.00013501033875740e+00,
1.00013522569633939e+00,
1.00013543990983234e+00,
1.00013565298497165e+00,
1.00013586492745898e+00,
1.00013607574296248e+00,
1.00013628543711874e+00,
1.00013649401553018e+00,
1.00013670148376788e+00,
1.00013690784737008e+00,
1.00013711311184328e+00,
1.00013731728266264e+00,
1.00013752036527093e+00,
1.00013772236507958e+00,
1.00013792328747009e+00,
1.00013812313779171e+00,
1.00013832192136376e+00,
1.00013851964347489e+00,
1.00013871630938267e+00,
1.00013891192431603e+00,
1.00013910649347282e+00,
1.00013930002202200e+00,
1.00013949251510170e+00,
1.00013968397782316e+00,
1.00013987441526542e+00,
1.00014006383248133e+00,
1.00014025223449377e+00,
1.00014043962629695e+00,
1.00014062601285714e+00,
1.00014081139911282e+00,
1.00014099578997318e+00,
1.00014117919032164e+00,
1.00014136160501166e+00,
1.00014154303887159e+00,
1.00014172349670072e+00,
1.00014190298327321e+00,
1.00014208150333372e+00,
1.00014225906160248e+00,
1.00014243566277283e+00,
1.00014261131151039e+00,
1.00014278601245632e+00,
1.00014295977022516e+00,
1.00014313258940524e+00,
1.00014330447455912e+00,
1.00014347543022497e+00,
1.00014364546091472e+00,
1.00014381457111479e+00,
1.00014398276528804e+00,
1.00014415004787116e+00,
1.00014431642327639e+00,
1.00014448189589245e+00,
1.00014464647008228e+00,
1.00014481015018575e+00,
1.00014497294051785e+00,
1.00014513484537026e+00,
1.00014529586901091e+00,
1.00014545601568416e+00,
1.00014561528961021e+00,
1.00014577369498725e+00,
1.00014593123598905e+00,
1.00014608791676762e+00,
1.00014624374145167e+00,
1.00014639871414657e+00,
1.00014655283893594e+00,
1.00014670611988077e+00,
1.00014685856102026e+00,
1.00014701016637053e+00,
1.00014716093992639e+00,
1.00014731088566067e+00,
1.00014746000752530e+00,
1.00014760830944893e+00,
1.00014775579534065e+00,
1.00014790246908691e+00,
1.00014804833455373e+00,
1.00014819339558603e+00,
1.00014833765600786e+00,
1.00014848111962218e+00,
1.00014862379021219e+00,
1.00014876567153954e+00,
1.00014890676734614e+00,
1.00014904708135388e+00,
1.00014918661726382e+00,
1.00014932537875789e+00,
1.00014946336949784e+00,
1.00014960059312541e+00,
1.00014973705326327e+00,
1.00014987275351430e+00,
1.00015000769746210e+00,
1.00015014188867113e+00,
1.00015027533068612e+00,
1.00015040802703381e+00,
1.00015053998122205e+00,
1.00015067119673873e+00,
1.00015080167705439e+00,
1.00015093142562050e+00,
1.00015106044587010e+00,
1.00015118874121778e+00,
1.00015131631506082e+00,
1.00015144317077698e+00,
1.00015156931172799e+00,
1.00015169474125565e+00,
1.00015181946268594e+00,
1.00015194347932557e+00,
1.00015206679446456e+00,
1.00015218941137585e+00,
1.00015231133331484e+00,
1.00015243256351938e+00,
1.00015255310521001e+00,
1.00015267296159127e+00,
1.00015279213585018e+00,
1.00015291063115708e+00,
1.00015302845066589e+00,
1.00015314559751323e+00,
1.00015326207482036e+00,
1.00015337788569125e+00,
1.00015349303321388e+00,
1.00015360752046023e+00,
1.00015372135048586e+00,
1.00015383452633122e+00,
1.00015394705101923e+00,
1.00015405892755949e+00,
1.00015417015894292e+00,
1.00015428074814761e+00,
1.00015439069813472e+00,
1.00015450001184947e+00,
1.00015460869222372e+00,
1.00015471674217249e+00,
1.00015482416459589e+00,
1.00015493096237984e+00,
1.00015503713839427e+00,
1.00015514269549444e+00,
1.00015524763652208e+00,
1.00015535196430227e+00,
1.00015545568164721e+00,
1.00015555879135398e+00,
1.00015566129620503e+00,
1.00015576319896837e+00,
1.00015586450239846e+00,
1.00015596520923489e+00,
1.00015606532220369e+00,
1.00015616484401670e+00,
1.00015626377737199e+00,
1.00015636212495318e+00,
1.00015645988943103e+00,
1.00015655707346252e+00,
1.00015665367969042e+00,
1.00015674971074420e+00,
1.00015684516924042e+00,
1.00015694005778211e+00,
1.00015703437895853e+00,
1.00015712813534630e+00,
1.00015722132950891e+00,
1.00015731396399610e+00,
1.00015740604134629e+00,
1.00015749756408279e+00,
1.00015758853471848e+00,
1.00015767895575181e+00,
1.00015776882966878e+00,
1.00015785815894387e+00,
1.00015794694603777e+00,
1.00015803519339941e+00,
1.00015812290346573e+00,
1.00015821007866035e+00,
1.00015829672139578e+00,
1.00015838283407144e+00,
1.00015846841907563e+00,
1.00015855347878380e+00,
1.00015863801555938e+00,
1.00015872203175560e+00,
1.00015880552971104e+00,
1.00015888851175561e+00,
1.00015897098020567e+00,
1.00015905293736629e+00,
1.00015913438553095e+00,
1.00015921532698315e+00,
1.00015929576399243e+00,
1.00015937569881874e+00,
1.00015945513371074e+00,
1.00015953407090552e+00,
1.00015961251262864e+00,
1.00015969046109499e+00,
1.00015976791850902e+00,
1.00015984488706366e+00,
1.00015992136894050e+00,
1.00015999736631134e+00,
1.00016007288133690e+00,
1.00016014791616614e+00,
1.00016022247293956e+00,
1.00016029655378502e+00,
1.00016037016082016e+00,
1.00016044329615417e+00,
1.00016051596188316e+00,
1.00016058816009479e+00,
1.00016065989286562e+00,
1.00016073116226134e+00,
1.00016080197034007e+00,
1.00016087231914641e+00,
1.00016094221071761e+00,
1.00016101164707938e+00,
1.00016108063024833e+00,
1.00016114916223087e+00,
1.00016121724502360e+00,
1.00016128488061340e+00,
1.00016135207097712e+00,
1.00016141881808274e+00,
1.00016148512388803e+00,
1.00016155099034165e+00,
1.00016161641938206e+00,
1.00016168141293904e+00,
1.00016174597293217e+00,
1.00016181010127303e+00,
1.00016187379986232e+00,
1.00016193707059253e+00,
1.00016199991534704e+00,
1.00016206233599947e+00,
1.00016212433441498e+00,
1.00016218591244921e+00,
1.00016224707194912e+00,
1.00016230781475302e+00,
1.00016236814268900e+00,
1.00016242805757849e+00,
1.00016248756123227e+00,
1.00016254665545357e+00,
1.00016260534203649e+00,
1.00016266362276629e+00,
1.00016272149941954e+00,
1.00016277897376504e+00,
1.00016283604756251e+00,
1.00016289272256387e+00,
1.00016294900051173e+00,
1.00016300488314047e+00,
1.00016306037217717e+00,
1.00016311546933934e+00,
1.00016317017633738e+00,
1.00016322449487283e+00,
1.00016327842663943e+00,
1.00016333197332274e+00,
1.00016338513660030e+00,
1.00016343791814211e+00
};
double c0[513] = {
	-6.92393607706484442e-04,
-1.69435356360851512e-03,
-2.67639261828703711e-03,
-3.65308182924139286e-03,
-4.62661375147393594e-03,
-5.59765294411130199e-03,
-6.56647235712372237e-03,
-7.53320662718292861e-03,
-8.49793124889594749e-03,
-9.46069293597006679e-03,
-1.04215230127549068e-02,
-1.13804439599141972e-02,
-1.23374728769976866e-02,
-1.32926234329576818e-02,
-1.42459070227596574e-02,
-1.51973334831705612e-02,
-1.61469115520556268e-02,
-1.70946491723864002e-02,
-1.80405536989601614e-02,
-1.89846320423261473e-02,
-1.99268907711093145e-02,
-2.08673361861249351e-02,
-2.18059743749661784e-02,
-2.27428112528213384e-02,
-2.36778525934161384e-02,
-2.46111040527660432e-02,
-2.55425711876202735e-02,
-2.64722594699366848e-02,
-2.74001742983540457e-02,
-2.83263210073680070e-02,
-2.92507048747336872e-02,
-3.01733311274856864e-02,
-3.10942049468709222e-02,
-3.20133314724198384e-02,
-3.29307158053294274e-02,
-3.38463630112926517e-02,
-3.47602781228797050e-02,
-3.56724661415542613e-02,
-3.65829320393902188e-02,
-3.74916807605420524e-02,
-3.83987172225106269e-02,
-3.93040463172390081e-02,
-4.02076729120657700e-02,
-4.11096018505587371e-02,
-4.20098379532476696e-02,
-4.29083860182713286e-02,
-4.38052508219516981e-02,
-4.47004371193059774e-02,
-4.55939496445050829e-02,
-4.64857931112864428e-02,
-4.73759722133268724e-02,
-4.82644916245813585e-02,
-4.91513559995918961e-02,
-5.00365699737702757e-02,
-5.09201381636582018e-02,
-5.18020651671674132e-02,
-5.26823555638024563e-02,
-5.35610139148677555e-02,
-5.44380447636611739e-02,
-5.53134526356554579e-02,
-5.61872420386689206e-02,
-5.70594174630265835e-02,
-5.79299833817126034e-02,
-5.87989442505152810e-02,
-5.96663045081650550e-02,
-6.05320685764661887e-02,
-6.13962408604232859e-02,
-6.22588257483623134e-02,
-6.31198276120472912e-02,
-6.39792508067928978e-02,
-6.48370996715731951e-02,
-6.56933785291268502e-02,
-6.65480916860594490e-02,
-6.74012434329427090e-02,
-6.82528380444111377e-02,
-6.91028797792563321e-02,
-6.99513728805188639e-02,
-7.07983215755782630e-02,
-7.16437300762409884e-02,
-7.24876025788267070e-02,
-7.33299432642527255e-02,
-7.41707562981171464e-02,
-7.50100458307803170e-02,
-7.58478159974452365e-02,
-7.66840709182362718e-02,
-7.75188146982771775e-02,
-7.83520514277675773e-02,
-7.91837851820586386e-02,
-8.00140200217276665e-02,
-8.08427599926517249e-02,
-8.16700091260804117e-02,
-8.24957714387077878e-02,
-8.33200509327433614e-02,
-8.41428515959824763e-02,
-8.49641774018758955e-02,
-8.57840323095986207e-02,
-8.66024202641180602e-02,
-8.74193451962615303e-02,
-8.82348110227832577e-02,
-8.90488216464305343e-02,
-8.98613809560094429e-02,
-9.06724928264500268e-02,
-9.14821611188708916e-02,
-9.22903896806431950e-02,
-9.30971823454542491e-02,
-9.39025429333705114e-02,
-9.47064752509002433e-02,
-9.55089830910554188e-02,
-9.63100702334134529e-02,
-9.71097404441785134e-02,
-9.79079974762419730e-02,
-9.87048450692429996e-02,
-9.95002869496281334e-02,
-1.00294326830711142e-01,
-1.01086968412731820e-01,
-1.01878215382914736e-01,
-1.02668071415527654e-01,
-1.03456540171939296e-01,
-1.04243625300676948e-01,
-1.05029330437483748e-01,
-1.05813659205375346e-01,
-1.06596615214696461e-01,
-1.07378202063176970e-01,
-1.08158423335987824e-01,
-1.08937282605796201e-01,
-1.09714783432820956e-01,
-1.10490929364887108e-01,
-1.11265723937480535e-01,
-1.12039170673801869e-01,
-1.12811273084820529e-01,
-1.13582034669328119e-01,
-1.14351458913991677e-01,
-1.15119549293406523e-01,
-1.15886309270148799e-01,
-1.16651742294827943e-01,
-1.17415851806138505e-01,
-1.18178641230911874e-01,
-1.18940113984167928e-01,
-1.19700273469165841e-01,
-1.20459123077455030e-01,
-1.21216666188926014e-01,
-1.21972906171860115e-01,
-1.22727846382980121e-01,
-1.23481490167499597e-01,
-1.24233840859172523e-01,
-1.24984901780342481e-01,
-1.25734676241991555e-01,
-1.26483167543789049e-01,
-1.27230378974139913e-01,
-1.27976313810232972e-01,
-1.28720975318088543e-01,
-1.29464366752606475e-01,
-1.30206491357613169e-01,
-1.30947352365909153e-01,
-1.31686952999315460e-01,
-1.32425296468720810e-01,
-1.33162385974127578e-01,
-1.33898224704698143e-01,
-1.34632815838800934e-01,
-1.35366162544055840e-01,
-1.36098267977379894e-01,
-1.36829135285032377e-01,
-1.37558767602659754e-01,
-1.38287168055340415e-01,
-1.39014339757629446e-01,
-1.39740285813602511e-01,
-1.40465009316900230e-01,
-1.41188513350771649e-01,
-1.41910800988118424e-01,
-1.42631875291537674e-01,
-1.43351739313365228e-01,
-1.44070396095718894e-01,
-1.44787848670540703e-01,
-1.45504100059639901e-01,
-1.46219153274734809e-01,
-1.46933011317495227e-01,
-1.47645677179584156e-01,
-1.48357153842699263e-01,
-1.49067444278614764e-01,
-1.49776551449222389e-01,
-1.50484478306572189e-01,
-1.51191227792913829e-01,
-1.51896802840736977e-01,
-1.52601206372811438e-01,
-1.53304441302228062e-01,
-1.54006510532437940e-01,
-1.54707416957292732e-01,
-1.55407163461084186e-01,
-1.56105752918583474e-01,
-1.56803188195080490e-01,
-1.57499472146422681e-01,
-1.58194607619054212e-01,
-1.58888597450054209e-01,
-1.59581444467175620e-01,
-1.60273151488883020e-01,
-1.60963721324391157e-01,
-1.61653156773702428e-01,
-1.62341460627644651e-01,
-1.63028635667908955e-01,
-1.63714684667086441e-01,
-1.64399610388705875e-01,
-1.65083415587270382e-01,
-1.65766103008294335e-01,
-1.66447675388339794e-01,
-1.67128135455053117e-01,
-1.67807485927201072e-01,
-1.68485729514706889e-01,
-1.69162868918686204e-01,
-1.69838906831482783e-01,
-1.70513845936703989e-01,
-1.71187688909256175e-01,
-1.71860438415379846e-01,
-1.72532097112684801e-01,
-1.73202667650184799e-01,
-1.73872152668332419e-01,
-1.74540554799053338e-01,
-1.75207876665781026e-01,
-1.75874120883490609e-01,
-1.76539290058733006e-01,
-1.77203386789668793e-01,
-1.77866413666101869e-01,
-1.78528373269512874e-01,
-1.79189268173092997e-01,
-1.79849100941776446e-01,
-1.80507874132274176e-01,
-1.81165590293106304e-01,
-1.81822251964635195e-01,
-1.82477861679097797e-01,
-1.83132421960638031e-01,
-1.83785935325339267e-01,
-1.84438404281256324e-01,
-1.85089831328447252e-01,
-1.85740218959005415e-01,
-1.86389569657090998e-01,
-1.87037885898962558e-01,
-1.87685170153008118e-01,
-1.88331424879776943e-01,
-1.88976652532009903e-01,
-1.89620855554670842e-01,
-1.90264036384977270e-01,
-1.90906197452430731e-01,
-1.91547341178847530e-01,
-1.92187469978389092e-01,
-1.92826586257591748e-01,
-1.93464692415397210e-01,
-1.94101790843182270e-01,
-1.94737883924788635e-01,
-1.95372974036552322e-01,
-1.96007063547333493e-01,
-1.96640154818545548e-01,
-1.97272250204184069e-01,
-1.97903352050856657e-01,
-1.98533462697811081e-01,
-1.99162584476964361e-01,
-1.99790719712931608e-01,
-2.00417870723054226e-01,
-2.01044039817428383e-01,
-2.01669229298933494e-01,
-2.02293441463259949e-01,
-2.02916678598937500e-01,
-2.03538942987362803e-01,
-2.04160236902827447e-01,
-2.04780562612545181e-01,
-2.05399922376679839e-01,
-2.06018318448372262e-01,
-2.06635753073767747e-01,
-2.07252228492043084e-01,
-2.07867746935433612e-01,
-2.08482310629259870e-01,
-2.09095921791954464e-01,
-2.09708582635088708e-01,
-2.10320295363398801e-01,
-2.10931062174812556e-01,
-2.11540885260475375e-01,
-2.12149766804776485e-01,
-2.12757708985374799e-01,
-2.13364713973224818e-01,
-2.13970783932602604e-01,
-2.14575921021130961e-01,
-2.15180127389805381e-01,
-2.15783405183019278e-01,
-2.16385756538588991e-01,
-2.16987183587779464e-01,
-2.17587688455328943e-01,
-2.18187273259473957e-01,
-2.18785940111974248e-01,
-2.19383691118137242e-01,
-2.19980528376842926e-01,
-2.20576453980568188e-01,
-2.21171470015411153e-01,
-2.21765578561115451e-01,
-2.22358781691094409e-01,
-2.22951081472455154e-01,
-2.23542479966022389e-01,
-2.24132979226362161e-01,
-2.24722581301805863e-01,
-2.25311288234473550e-01,
-2.25899102060297619e-01,
-2.26486024809046033e-01,
-2.27072058504345725e-01,
-2.27657205163705884e-01,
-2.28241466798540654e-01,
-2.28824845414192485e-01,
-2.29407343009954884e-01,
-2.29988961579095014e-01,
-2.30569703108876561e-01,
-2.31149569580582165e-01,
-2.31728562969536117e-01,
-2.32306685245126154e-01,
-2.32883938370826632e-01,
-2.33460324304219508e-01,
-2.34035844997017434e-01,
-2.34610502395085324e-01,
-2.35184298438461836e-01,
-2.35757235061381881e-01,
-2.36329314192297746e-01,
-2.36900537753900797e-01,
-2.37470907663142772e-01,
-2.38040425831257785e-01,
-2.38609094163782814e-01,
-2.39176914560579240e-01,
-2.39743888915854214e-01,
-2.40310019118181145e-01,
-2.40875307050520709e-01,
-2.41439754590242167e-01,
-2.42003363609143429e-01,
-2.42566135973472013e-01,
-2.43128073543945444e-01,
-2.43689178175771931e-01,
-2.44249451718670435e-01,
-2.44808896016891125e-01,
-2.45367512909235280e-01,
-2.45925304229075908e-01,
-2.46482271804377318e-01,
-2.47038417457714876e-01,
-2.47593743006295330e-01,
-2.48148250261976178e-01,
-2.48701941031285512e-01,
-2.49254817115441285e-01,
-2.49806880310371265e-01,
-2.50358132406731826e-01,
-2.50908575189927818e-01,
-2.51458210440131336e-01,
-2.52007039932301335e-01,
-2.52555065436202097e-01,
-2.53102288716422708e-01,
-2.53648711532395654e-01,
-2.54194335638415592e-01,
-2.54739162783658324e-01,
-2.55283194712199402e-01,
-2.55826433163032219e-01,
-2.56368879870087218e-01,
-2.56910536562249603e-01,
-2.57451404963378150e-01,
-2.57991486792323088e-01,
-2.58530783762944749e-01,
-2.59069297584130886e-01,
-2.59607029959815494e-01,
-2.60143982588996070e-01,
-2.60680157165751825e-01,
-2.61215555379261388e-01,
-2.61750178913820353e-01,
-2.62284029448859091e-01,
-2.62817108658960186e-01,
-2.63349418213875919e-01,
-2.63880959778545532e-01,
-2.64411735013112936e-01,
-2.64941745572943255e-01,
-2.65470993108640696e-01,
-2.65999479266065264e-01,
-2.66527205686349744e-01,
-2.67054174005916967e-01,
-2.67580385856496128e-01,
-2.68105842865140276e-01,
-2.68630546654242519e-01,
-2.69154498841552847e-01,
-2.69677701040194562e-01,
-2.70200154858681096e-01,
-2.70721861900932392e-01,
-2.71242823766291052e-01,
-2.71763042049538550e-01,
-2.72282518340912050e-01,
-2.72801254226119949e-01,
-2.73319251286358256e-01,
-2.73836511098326463e-01,
-2.74353035234243869e-01,
-2.74868825261865179e-01,
-2.75383882744495989e-01,
-2.75898209241009218e-01,
-2.76411806305860486e-01,
-2.76924675489103655e-01,
-2.77436818336406432e-01,
-2.77948236389066017e-01,
-2.78458931184024150e-01,
-2.78968904253883154e-01,
-2.79478157126920090e-01,
-2.79986691327103521e-01,
-2.80494508374107221e-01,
-2.81001609783326056e-01,
-2.81507997065891025e-01,
-2.82013671728683912e-01,
-2.82518635274352392e-01,
-2.83022889201324790e-01,
-2.83526435003825072e-01,
-2.84029274171887169e-01,
-2.84531408191370183e-01,
-2.85032838543972489e-01,
-2.85533566707246445e-01,
-2.86033594154613158e-01,
-2.86532922355376363e-01,
-2.87031552774737075e-01,
-2.87529486873808138e-01,
-2.88026726109627818e-01,
-2.88523271935174797e-01,
-2.89019125799381660e-01,
-2.89514289147148995e-01,
-2.90008763419359716e-01,
-2.90502550052892827e-01,
-2.90995650480637413e-01,
-2.91488066131506185e-01,
-2.91979798430449633e-01,
-2.92470848798469407e-01,
-2.92961218652632305e-01,
-2.93450909406083538e-01,
-2.93939922468060499e-01,
-2.94428259243906143e-01,
-2.94915921135082415e-01,
-2.95402909539183800e-01,
-2.95889225849950477e-01,
-2.96374871457281475e-01,
-2.96859847747248273e-01,
-2.97344156102107460e-01,
-2.97827797900314328e-01,
-2.98310774516535371e-01,
-2.98793087321662043e-01,
-2.99274737682822978e-01,
-2.99755726963397140e-01,
-3.00236056523026762e-01,
-3.00715727717630055e-01,
-3.01194741899413809e-01,
-3.01673100416886386e-01,
-3.02150804614869983e-01,
-3.02627855834513459e-01,
-3.03104255413304546e-01,
-3.03580004685083171e-01,
-3.04055104980052671e-01,
-3.04529557624792890e-01,
-3.05003363942272288e-01,
-3.05476525251860864e-01,
-3.05949042869341048e-01,
-3.06420918106920848e-01,
-3.06892152273246122e-01,
-3.07362746673411957e-01,
-3.07832702608974884e-01,
-3.08302021377965252e-01,
-3.08770704274898833e-01,
-3.09238752590788757e-01,
-3.09706167613157224e-01,
-3.10172950626047605e-01,
-3.10639102910035714e-01,
-3.11104625742241958e-01,
-3.11569520396342670e-01,
-3.12033788142581980e-01,
-3.12497430247782759e-01,
-3.12960447975359157e-01,
-3.13422842585326933e-01,
-3.13884615334315609e-01,
-3.14345767475579518e-01,
-3.14806300259009186e-01,
-3.15266214931142930e-01,
-3.15725512735177238e-01,
-3.16184194910978822e-01,
-3.16642262695095211e-01,
-3.17099717320766306e-01,
-3.17556560017934975e-01,
-3.18012792013258327e-01,
-3.18468414530118316e-01,
-3.18923428788633223e-01,
-3.19377836005668381e-01,
-3.19831637394846324e-01,
-3.20284834166558507e-01,
-3.20737427527975405e-01,
-3.21189418683057670e-01,
-3.21640808832566238e-01,
-3.22091599174073762e-01,
-3.22541790901974101e-01,
-3.22991385207493764e-01,
-3.23440383278702059e-01,
-3.23888786300521425e-01,
-3.24336595454738141e-01,
-3.24783811920012322e-01,
-3.25230436871888462e-01,
-3.25676471482805763e-01,
-3.26121916922107957e-01,
-3.26566774356054579e-01,
-3.27011044947829566e-01,
-3.27454729857552695e-01,
-3.27897830242289190e-01,
-3.28340347256059206e-01,
-3.28782282049848884e-01,
-3.29223635771619672e-01,
-3.29664409566318373e-01,
-3.30104604575886973e-01,
-3.30544221939272409e-01,
-3.30983262792436728e-01,
-3.31421728268366578e-01,
-3.31859619497082758e-01,
-3.32296937605650378e-01,
-3.32733683718188344e-01,
-3.33169858955878584e-01,
-3.33605464436976196e-01,
-3.34040501276818613e-01,
-4.24242434343000001e+05
};
double x0[513] = {
	2.04405886119352093e-01,
2.35549151131188239e-01,
7.97764071136527336e-02,
5.45571327290680252e-01,
2.24096102585168794e-01,
2.63307278641737863e-01,
4.79109794348754614e-01,
3.00092439489051566e-01,
3.73493504308614666e-01,
6.68564656504091193e-02,
1.30327793799531716e-01,
2.76565733855110130e-01,
2.42488683008825645e-01,
4.13325288907086252e-01,
2.54675178013457182e-01,
3.31010028667468592e-01,
5.73216616884520344e-02,
5.53357143543639407e-01,
4.81987161224848137e-01,
2.57439706972841187e-01,
1.12217308167648716e-01,
2.15351164040178567e-01,
3.96230344525589251e-01,
5.65317962714851768e-02,
4.60378700174969069e-01,
4.68503030178056834e-01,
1.00482164829855392e-01,
5.39590917705074169e-01,
3.72872895766712176e-01,
2.97892100113215319e-01,
5.06247313317401693e-01,
1.56562609434502370e-01,
2.25901509252521615e-01,
2.61614709891094588e-01,
7.00723462766313365e-02,
4.41591187042828792e-01,
2.60204235932225192e-01,
5.35246657911756407e-01,
3.20798197205254210e-01,
3.95101965358493734e-01,
1.60794031311110530e-01,
3.14140760119390683e-01,
5.42411865622812850e-01,
3.55044504926603000e-01,
2.89711351151772822e-01,
5.35190238953401565e-01,
4.03451971195000481e-01,
2.45309630926564437e-01,
3.67738770556427563e-01,
3.61871198887530887e-01,
5.28025031242345122e-01,
4.15807723074696378e-01,
2.93491421361542826e-01,
2.75775868438143279e-01,
1.75124446733223554e-01,
3.26609349915796099e-01,
2.97497167404731866e-01,
3.61363428262337860e-01,
5.54034171043896628e-01,
3.90814124523530759e-01,
2.46155915301886075e-01,
5.64020326672691974e-01,
4.63876675592965249e-01,
2.02938993202127937e-01,
7.43037681532395106e-02,
2.32558946338385142e-01,
3.18090087204224992e-01,
6.92824808596644720e-02,
5.42581122497877266e-01,
3.40544832629425698e-01,
3.25932322415538822e-01,
4.83510473100427107e-01,
3.11545488035071039e-01,
4.39447266625347388e-01,
2.20880221958946604e-01,
6.51074779414110710e-02,
1.89172767363562672e-01,
2.56367746764100457e-01,
1.41837261303905948e-01,
5.12227722903007998e-01,
2.33235973838642446e-01,
1.10637577333715001e-01,
1.64348425687461414e-01,
2.82828238232490203e-01,
2.94281286778509621e-01,
2.71939379270018544e-01,
2.38200842173862726e-01,
3.10135014076201587e-01,
2.51628554262299298e-01,
1.89680537988755671e-01,
1.36928811927040456e-01,
2.93265745528123734e-01,
3.85172228688053175e-01,
1.70893024856615366e-01,
1.59665652144015013e-01,
3.15494815119905347e-01,
2.00118045284389173e-01,
3.46863755965160558e-01,
2.92927231777995067e-01,
3.48782000549222926e-01,
4.91747641020224391e-01,
3.21193129913737663e-01,
3.50023217633027961e-01,
1.08662913791297860e-01,
5.40832134788879149e-01,
2.02092708826806300e-01,
1.60399098602627105e-01,
5.38913890204816837e-01,
3.84269525354376806e-01,
3.33266787001659626e-01,
3.89065136814532753e-01,
1.57578150684888313e-01,
5.11212181652621944e-01,
5.24414217907639424e-01,
4.49997611837690381e-01,
2.64548495725542898e-01,
1.58650110893629070e-01,
4.08981029113768546e-01,
1.11145347958907986e-01,
1.34502796717785089e-01,
3.69939109932263754e-01,
4.49997611837690381e-01,
1.02626085247336865e-01,
1.68805523397488694e-01,
4.15751304116341591e-01,
1.87593036529628970e-01,
1.00312907954791072e-01,
1.94476149448911589e-01,
2.24434616335297432e-01,
3.86751959521986932e-01,
4.80125335599140557e-01,
4.70929045387312173e-01,
1.79186611734767381e-01,
1.31117659216498567e-01,
1.21131503587703276e-01,
1.88608577780014913e-01,
1.46012264222159321e-01,
9.28091864936059080e-02,
1.76478501733738163e-01,
6.60666002334422547e-02,
2.28553200295196074e-01,
1.12217308167648716e-01,
3.69600596182135144e-01,
1.34107864009301664e-01,
3.26609349915796099e-01,
1.06011222748623415e-01,
5.56742281044925957e-01,
5.21593269989900632e-01,
5.10253059360590733e-01,
4.66810461427413559e-01,
4.44581391835631945e-01,
1.90865336114205947e-01,
4.31435774538969252e-01,
2.41021790091601490e-01,
4.42155376626376551e-01,
2.23475494043266276e-01,
2.78596816355882071e-01,
4.00631023277261689e-01,
4.85485136642844317e-01,
7.63912696123661972e-02,
3.63507348679819375e-01,
2.54675178013457182e-01,
4.93891561437705795e-01,
1.79073773818057863e-01,
3.85285066604762749e-01,
3.50023217633027961e-01,
2.65620455934283628e-01,
1.04995681498237431e-01,
3.42575915130197584e-01,
1.88834253613434033e-01,
1.46012264222159321e-01,
2.34759285714221388e-01,
3.88049595564146754e-01,
4.14848600782665167e-01,
3.26383674082377007e-01,
2.09427173412927103e-01,
5.39873012496847937e-01,
4.93835142479351064e-01,
1.27506845881792924e-01,
2.34815704672576175e-01,
5.41339905414072176e-01,
2.78314721564108192e-01,
2.29681579462291591e-01,
1.33769350259173025e-01,
2.56649841555874336e-01,
1.65363966937847384e-01,
4.16484750574953655e-01,
3.13012380952295166e-01,
4.12986775156957586e-01,
4.20377658701433177e-01,
3.65876944930719927e-01,
1.43473411096194436e-01,
3.14197179077745470e-01,
9.96922994128885270e-02,
1.88157226113176729e-01,
2.60091398015515674e-01,
1.48156184639640809e-01,
2.53941731554845118e-01,
2.60655587599063432e-01,
4.91691222061869604e-01,
1.88100807154821942e-01,
5.54485522710734924e-01,
5.25881110824863662e-01,
3.85115809729698444e-01,
3.56454978885472451e-01,
3.26214417207312701e-01,
2.80797155731718262e-01,
3.10924879493168493e-01,
5.49238559583740793e-01,
4.25850297661846455e-01,
4.16597588491663229e-01,
4.90450004978064513e-01,
5.62102082088629551e-01,
1.69087618189262573e-01,
5.54259846877315776e-01,
5.04949677275241871e-01,
4.71718910804279024e-01,
2.84407969066423960e-01,
3.31517799292661619e-01,
4.14397249115827038e-01,
4.27994218079327970e-01,
7.32882269028535399e-02,
5.57137213753409299e-01,
9.16243883681556182e-02,
3.13407313660778619e-01,
3.16623194287000864e-01,
2.70359648436084843e-01,
4.88362503518937840e-01,
5.33554089161113132e-01,
4.95696968105058700e-01,
4.06555013904513207e-01,
2.13376500497761412e-01,
3.56172884093698516e-01,
8.96497248257384777e-02,
5.60014580629502934e-01,
3.87711081814018144e-01,
2.05816360078221489e-01,
2.74083299687500004e-01,
2.60091398015515674e-01,
3.28696851374922827e-01,
5.56178091461378199e-01,
5.30676722285019498e-01,
5.49182140625385951e-01,
4.32564153706064769e-01,
4.84187500600684440e-01,
2.56142070930681365e-01,
2.78201883647398618e-01,
1.09452779208264725e-01,
2.05816360078221489e-01,
6.44304504411537665e-02,
4.02097916194485927e-01,
3.74791140350774488e-01,
5.60973702921534034e-01,
1.86746752154307333e-01,
4.80915201016107463e-01,
2.22629209667944639e-01,
4.22070227452076452e-01,
1.90921755072560706e-01,
3.07483323033527212e-01,
1.98933247158938870e-01,
2.40626857383118037e-01,
4.07006365571351392e-01,
5.59845323754438517e-01,
1.29537928382564838e-01,
4.77530063514820913e-01,
3.94650613691655550e-01,
1.31625429841691538e-01,
5.39816593538493206e-01,
1.84151480069987661e-01,
3.58429642427889550e-01,
1.88777834655079246e-01,
1.82684587152763478e-01,
5.49577073333869404e-01,
3.01333656572856656e-01,
3.26383674082377007e-01,
1.30271374841176929e-01,
2.64548495725542898e-01,
4.09714475572380610e-01,
4.14397249115827038e-01,
2.86439051567195901e-01,
3.45678957839710310e-01,
1.03472369622658503e-01,
1.14474066501839750e-01,
2.67369443643281690e-01,
2.21613668417558668e-01,
1.96507231949683503e-01,
9.86767581625025703e-02,
2.19639004875141514e-01,
4.31040841830485799e-01,
2.95748179695733859e-01,
4.00348928485487865e-01,
5.10365897277300307e-01,
1.90413984447367762e-01,
1.39636921928069674e-01,
1.27450426923438137e-01,
5.26558138325120995e-01,
3.13689408452552498e-01,
5.40493621038750538e-01,
2.73406272187242672e-01,
1.98876828200584083e-01,
4.06498594946158420e-01,
2.96143112404217312e-01,
1.98143381741972019e-01,
2.69682620935827511e-01,
4.82212837058267285e-01,
8.95368869090289315e-02,
5.10196640402236001e-01,
4.23029349744107663e-01,
3.16453937411936448e-01,
2.20880221958946604e-01,
1.58650110893629070e-01,
5.01169607065471867e-01,
1.60963288186174863e-01,
1.78453165276155318e-01,
6.26250437738009452e-02,
4.20716172451561898e-01,
2.07057577162026551e-01,
5.05852380608918240e-01,
2.33461649672061539e-01,
6.84361964843428344e-02,
1.18141298794900165e-01,
3.86018513063374868e-01,
4.33241181206322046e-01,
4.22013808493721720e-01,
3.83310403062345595e-01,
3.33436043876723931e-01,
5.39478079788364595e-01,
1.73939648607773278e-01,
3.62999578054626348e-01,
2.18002855082853025e-01,
1.95717366532716652e-01,
3.03308320115273755e-01,
1.45730169430385442e-01,
1.54757202767149549e-01,
2.27876172794938742e-01,
4.22239484327140757e-01,
2.99189736155375141e-01,
5.30789560201729071e-01,
3.39924224087523152e-01,
1.65758899646330810e-01,
1.80371409860217685e-01,
3.51997881175445171e-01,
1.96281556116264411e-01,
5.57983498128730937e-01,
5.40662877913814843e-01,
2.32953879046868567e-01,
5.47715247708161823e-01,
5.47320314999678370e-01,
4.45371257252598796e-01,
2.85987699900357661e-01,
6.50510589830562980e-02,
7.49807956534968012e-02,
4.85823650392972928e-01,
4.99928389981666832e-01,
4.72057424554407690e-01,
5.18885159988871414e-01,
5.58378430837214390e-01,
3.06749876574915092e-01,
2.32164013629901689e-01,
4.55639507673167965e-01,
4.02210754111195445e-01,
3.25932322415538822e-01,
4.66471947677284893e-01,
2.21782925292623001e-01,
5.42863217289651145e-01,
1.66266670271523781e-01,
1.03754464414432382e-01,
3.10078595117846856e-01,
5.33949021869596585e-01,
2.04970075702899851e-01,
1.70215997356358090e-01,
3.83987430562602927e-01,
2.04857237786190305e-01,
4.26978676828941972e-01,
2.12643054039149348e-01,
1.65194710062783051e-01,
5.44442948123584847e-01,
4.84187500600684440e-01,
3.19726236996513480e-01,
5.12791912486555757e-01,
4.39672942458766480e-01,
4.40237132042314239e-01,
5.25260502282961173e-01,
4.72339519346181569e-01,
3.29148203041761012e-01,
1.68410590689005241e-01,
2.19808261750205847e-01,
2.25506576544038190e-01,
2.78483978439172497e-01,
5.36882807704044840e-01,
5.37841929996076051e-01,
2.99133317197020354e-01,
2.80627898856653957e-01,
2.23475494043266276e-01,
1.84828507570244965e-01,
1.91091011947625039e-01,
3.93635072441269551e-01,
6.97902514848574573e-02,
1.75632217358416554e-01,
9.84510823290834641e-02,
4.28671245579585247e-01,
4.97615212689121067e-01,
4.38093211624832723e-01,
2.18454206749691238e-01,
5.32256453118953310e-01,
5.45289232498906484e-01,
4.61845593092193307e-01,
2.12530216122439775e-01,
4.41704024959538422e-01,
3.27117120540989070e-01,
2.28835295086969953e-01,
3.80263779311187766e-01,
1.67620725272038390e-01,
8.88034404504168401e-02,
2.07960280495702948e-01,
4.60942889758516827e-01,
2.34364353005737963e-01,
2.49258958011398746e-01,
4.27824961204263554e-01,
1.14079133793356310e-01,
1.25927115047859195e-01,
1.65928156521395115e-01,
2.25506576544038190e-01,
2.78709654272591589e-01,
4.69857085178571443e-01,
5.19675025405838320e-01,
1.39975435678198312e-01,
5.41791257080910360e-01,
5.38067605829495199e-01,
2.82715400315780685e-01,
5.36262199162142350e-01,
2.59583627390322647e-01,
1.27224751090019045e-01,
4.74201344971889149e-01,
5.55613901877830441e-01,
4.96712509355444587e-01,
3.40714089504490003e-01,
3.00543791155889750e-01,
3.34564423043819448e-01,
4.32733410581129074e-01,
4.38318887458251871e-01,
3.13915084285971591e-01,
4.86613515809939834e-01,
3.04436699282369272e-01,
3.89177974731242271e-01,
3.83366822020700382e-01,
4.93891561437705795e-01,
4.78658442681916430e-01,
3.10529946784685040e-01,
1.62712275895172898e-01,
1.06631831290525933e-01,
8.55875598241946228e-02,
3.08780959075687034e-01,
6.01426096061908194e-02,
5.14202386445425041e-01,
5.37898348954430894e-01,
5.42073351872684239e-01,
7.98328260720075067e-02,
4.00348928485487865e-01,
2.99584668863858594e-01,
1.36703136093621336e-01,
3.59501602636630280e-01,
4.08529677446930306e-01,
4.58855388299390210e-01,
2.93547840319897557e-01,
4.96881766230509003e-01,
1.98651152367164990e-01,
8.76750612833213372e-02,
5.02523662065986532e-01,
1.03754464414432382e-01,
3.06016430116303029e-01,
3.33830976585207384e-01,
2.78822492189301163e-01,
4.61450660383709854e-01,
3.12109677618618797e-01,
5.25373340199670635e-01,
2.57044774264357789e-01,
5.65317962714851768e-02,
4.85880069351327715e-01,
5.13299683111748672e-01,
3.16397518453581716e-01,
1.91203849864334585e-01,
4.21731713701947841e-01,
2.30979215504451413e-01,
6.70821414838282254e-02,
1.34897729426268542e-01,
4.63143229134353129e-01,
3.99333387235101867e-01,
8.85213456586429609e-02,
2.80966412606782623e-01,
3.90193515981628214e-01,
1.22429139629863112e-01,
2.49879566553301263e-01,
5.46868963332840186e-01,
6.32456523157034767e-02,
5.82243650221284451e-02,
1.33938607134237331e-01,
1.19608191712124334e-01,
3.16115423661807837e-01,
3.67005324097815444e-01,
3.73380666391905147e-01,
4.86162164143101594e-01,
1.98256219658681537e-01,
2.82094791773878140e-01,
8.43463427403895599e-02,
5.29999694784762276e-01,
4.04975283070579450e-01,
6.96774135681478973e-02,
2.34477190922447537e-01,
5.14766576028972800e-01,
1.39411246094650582e-01,
1.74785932983094916e-01,
0.00000000000000000e+00
};


double mu(double n, double alpha, double beta) {
	return sqrt(2 * (n + beta) * (n + alpha + beta) / (2 * n + alpha + beta) / (2 * n + alpha + beta + 1));
}
double nu(double n, double alpha, double beta) {
	return sqrt(2 * (n + 1) * (n + alpha + 1) / (2 * n + alpha + beta + 1) / (2 * n + alpha + beta + 2));
}

int reorder_i(int i, int M_size, int warpSize, int used_registers) {
	int ret = i / used_registers;
	if ((i % used_registers) < (M_size% used_registers)) {
		ret += (i % used_registers) * ((M_size + used_registers - 1) / used_registers);
	}
	else
	{
		ret += (M_size% used_registers) * ((M_size + used_registers - 1) / used_registers);
		ret += ((i % used_registers) - (M_size % used_registers)) * (M_size / used_registers);
	}
	return ret;
}
PfSolveResult sample_1_benchmark_VkFFT_double(VkGPU* vkGPU, uint64_t file_output, FILE* output, uint64_t isCompilerInitialized)
{
	PfSolveResult resFFT = PFSOLVE_SUCCESS;
#if(VKFFT_BACKEND==0)
	VkResult res = VK_SUCCESS;
#elif(VKFFT_BACKEND==1)
	cudaError_t res = cudaSuccess;
#elif(VKFFT_BACKEND==2)
	hipError_t res = hipSuccess;
#elif(VKFFT_BACKEND==3)
	cl_int res = CL_SUCCESS;
#endif
	if (file_output)
		fprintf(output, "0 - PfSolve PCR test\n");
	printf("0 - PfSolve PCR test\n");
	const int num_runs = 5;
	float benchmark_result = 0;//averaged result = sum(system_size/iteration_time)/num_benchmark_samples
	//memory allocated on the CPU once, makes benchmark completion faster + avoids performance issues connected to frequent allocation/deallocation.
	//printf("size GPU_L2 CPU_L2 - GPU_MAX CPU_MAX\n");
	uint64_t batchsizes[9] = { 10,50,100,250,500,1000,5000,10000,100000 };
	for (uint64_t t = 0; t < 7; t++) {
		for (uint64_t n = 64; n < 4097; n+=32) {
			float run_time[num_runs];
			for (uint64_t r = 0; r < num_runs; r++) {
				//Configuration + FFT application .
				PfSolveConfiguration configuration = {};
				PfSolveApplication app = {};
				//FFT + iFFT sample code.
				//Setting up FFT configuration for forward and inverse FFT.
				configuration.FFTdim = 1; //FFT dimension, 1D, 2D or 3D (default 1).
				configuration.M_size = n;// 1 + r;// 16 + 16 * (n % 128); //Multidimensional FFT dimensions sizes (default 1). For best performance (and stability), order dimensions in descendant size order as: x>y>z.   
				configuration.M_size_pow2 = (int64_t)pow(2, (int)ceil(log2((double)configuration.M_size)));; //Multidimensional FFT dimensions sizes (default 1). For best performance (and stability), order dimensions in descendant size order as: x>y>z.   
				configuration.size[0] = configuration.M_size; //Multidimensional FFT dimensions sizes (default 1). For best performance (and stability), order dimensions in descendant size order as: x>y>z.  
				configuration.size[1] = 5000;// batchsizes[t];
				configuration.size[2] = 1;
				configuration.scaleC = 1;
				configuration.jw_type = 10;
				configuration.doublePrecision = 1;
				configuration.isOutputFormatted = 1;
				//configuration.keepShaderCode = 1;
				int* x;
				int** y;
				y = &x;
				//configuration.aimThreads = 32;
				configuration.numConsecutiveJWIterations = (int64_t)pow(2, t);
				configuration.useMultipleInputBuffers = (int64_t)pow(2, t);
				configuration.jw_control_bitmask = (RUNTIME_OFFSETSOLUTION + RUNTIME_INPUTZEROPAD + RUNTIME_OUTPUTZEROPAD + RUNTIME_INPUTBUFFERSTRIDE + RUNTIME_OUTPUTBUFFERSTRIDE);// (RUNTIME_SCALEC);
				//configuration.JW_sequential = 1;
				//configuration.JW_parallel = 1;
				configuration.outputBufferStride[0] = configuration.size[0];
				//configuration.performWorland = 1;
				configuration.upperBanded = 1;
				//configuration.offsetV = 2 * configuration.size[0];
				//CUstream hStream;
				//cudaStreamCreate(&hStream);
				//configuration.stream = &hStream;
				//configuration.num_streams = 1;
				//configuration.disableCaching = 1;
				//After this, configuration file contains pointers to Vulkan objects needed to work with the GPU: VkDevice* device - created device, [uint64_t *bufferSize, VkBuffer *buffer, VkDeviceMemory* bufferDeviceMemory] - allocated GPU memory FFT is performed on. [uint64_t *kernelSize, VkBuffer *kernel, VkDeviceMemory* kernelDeviceMemory] - allocated GPU memory, where kernel for convolution is stored.
				configuration.device = &vkGPU->device;
#if(VKFFT_BACKEND==0)
				configuration.queue = &vkGPU->queue; //to allocate memory for LUT, we have to pass a queue, vkGPU->fence, commandPool and physicalDevice pointers 
				configuration.fence = &vkGPU->fence;
				configuration.commandPool = &vkGPU->commandPool;
				configuration.physicalDevice = &vkGPU->physicalDevice;
				configuration.isCompilerInitialized = isCompilerInitialized;//compiler can be initialized before PfSolve plan creation. if not, PfSolve will create and destroy one after initialization
#elif(VKFFT_BACKEND==3)
				configuration.platform = &vkGPU->platform;
				configuration.context = &vkGPU->context;
#endif
				//Allocate buffer for the input data.
				uint64_t bufferSolveSize;
				uint64_t bufferSolveResSize;

				bufferSolveSize = (uint64_t)sizeof(double) * 3 * configuration.size[0];
				bufferSolveResSize = (uint64_t)sizeof(double) * configuration.size[0] * configuration.size[1] * configuration.size[2];

#if(VKFFT_BACKEND==0)
				VkBuffer bufferSolve = {};
				VkDeviceMemory bufferSolveDeviceMemory = {};
				resFFT = allocateBuffer(vkGPU, &bufferSolve, &bufferSolveDeviceMemory, VK_BUFFER_USAGE_STORAGE_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT, VK_MEMORY_HEAP_DEVICE_LOCAL_BIT, bufferSolveSize);
				if (resFFT != PFSOLVE_SUCCESS) return resFFT;
				VkBuffer bufferSolveRes = {};
				VkDeviceMemory bufferSolveResDeviceMemory = {};
				resFFT = allocateBuffer(vkGPU, &bufferSolveRes, &bufferSolveResDeviceMemory, VK_BUFFER_USAGE_STORAGE_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_SRC_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT, VK_MEMORY_HEAP_DEVICE_LOCAL_BIT, bufferSolveResSize);
				if (resFFT != PFSOLVE_SUCCESS) return resFFT;
#elif(VKFFT_BACKEND==1)
				cuDoubleComplex** bufferSolve = (cuDoubleComplex**)calloc(configuration.numConsecutiveJWIterations, sizeof(cuDoubleComplex*));
				for (int i = 0; i < configuration.numConsecutiveJWIterations; i++)
					res = cudaMalloc((void**)&bufferSolve[i], bufferSolveSize);
				if (res != cudaSuccess) return PFSOLVE_ERROR_FAILED_TO_ALLOCATE;
				cuDoubleComplex* bufferSolveRes = 0;
				res = cudaMalloc((void**)&bufferSolveRes, bufferSolveResSize);
				if (res != cudaSuccess) return PFSOLVE_ERROR_FAILED_TO_ALLOCATE;
#elif(VKFFT_BACKEND==2)
				hipDoubleComplex** bufferSolve = (hipDoubleComplex**)calloc(configuration.numConsecutiveJWIterations, sizeof(hipDoubleComplex*));
				for (int i = 0; i < configuration.numConsecutiveJWIterations; i++)
					res = hipMalloc((void**)&bufferSolve[i], bufferSolveSize);
				if (res != hipSuccess) return PFSOLVE_ERROR_FAILED_TO_ALLOCATE;
				hipDoubleComplex* bufferSolveRes = 0;
				res = hipMalloc((void**)&bufferSolveRes, bufferSolveResSize);
				if (res != hipSuccess) return PFSOLVE_ERROR_FAILED_TO_ALLOCATE;
#elif(VKFFT_BACKEND==3)
				cl_mem bufferSolve = 0;
				bufferSolve = clCreateBuffer(vkGPU->context, CL_MEM_READ_WRITE, bufferSolveSize, 0, &res);
				if (res != CL_SUCCESS) return PFSOLVE_ERROR_FAILED_TO_ALLOCATE;
				cl_mem bufferSolveRes = 0;
				bufferSolveRes = clCreateBuffer(vkGPU->context, CL_MEM_READ_WRITE, bufferSolveResSize, 0, &res);
				if (res != CL_SUCCESS) return PFSOLVE_ERROR_FAILED_TO_ALLOCATE;
#endif

#if(VKFFT_BACKEND==0)
				configuration.buffer = &bufferSolve;
				configuration.outputBuffer = &bufferSolveRes;
#elif(VKFFT_BACKEND==1)
				configuration.buffer = (void**)bufferSolve;
				configuration.outputBuffer = (void**)&bufferSolveRes;
#elif(VKFFT_BACKEND==2)
				configuration.buffer = (void**)bufferSolve;
				configuration.outputBuffer = (void**)&bufferSolveRes;
#elif(VKFFT_BACKEND==3)
				configuration.buffer = &bufferSolve;
				configuration.outputBuffer = &bufferSolveRes;
#endif
				configuration.bufferSize = &bufferSolveSize;
				configuration.outputBufferSize = &bufferSolveResSize;

				//Fill data on CPU. It is best to perform all operations on GPU after initial upload.
				int l = 100;// 2 * configuration.size[0];
				double* buffer_input_matrix[100];

				double* buffer_input_matrix_gpu[100];
				for (int t = 0; t < configuration.numConsecutiveJWIterations; t++) {
					buffer_input_matrix[t] = (double*)calloc(bufferSolveSize, 1);
					buffer_input_matrix_gpu[t] = (double*)calloc(bufferSolveSize, 1);
				}

				int64_t tempM = configuration.size[0];
				if (!configuration.upperBanded) tempM += (configuration.numConsecutiveJWIterations - 1);
				int used_registers = (uint64_t)ceil(tempM / 32.0);

				tempM = configuration.size[0];

				/*for (int t = 0; t < configuration.numConsecutiveJWIterations; t++) {
					for (uint64_t i = 0; i < tempM; i++) {
						buffer_input_matrix[t][tempM + i] = mu(i, -0.5, l - 0.5 + 1);
						buffer_input_matrix[t][i] = nu(i, -0.5, l - 0.5 + 1);// / mu(i, -0.5, l - 0.5 + 1);// (float)(2 * ((float)rand()) / RAND_MAX - 1.0);
						buffer_input_matrix[t][2 * tempM + i] = nu(i, -0.5, l - 0.5 + 1);// / mu(i, -0.5, l - 0.5 + 1);// (float)(2 * ((float)rand()) / RAND_MAX - 1.0);
					}
				}*/
				double scale = 0.05 * n;
				for (int t = 0; t < configuration.numConsecutiveJWIterations; t++) {
					for (uint64_t i = 0; i < tempM; i++) {
						buffer_input_matrix[t][tempM + i] = 1.0 + scale * (double)(2 * ((double)rand()) / RAND_MAX - 1.0);
						buffer_input_matrix[t][i] = scale * (double)(2 * ((double)rand()) / RAND_MAX - 1.0);
						buffer_input_matrix[t][2 * tempM + i] = scale * (double)(2 * ((double)rand()) / RAND_MAX - 1.0);
						//printf("%.17e %.17e %.17e\n", buffer_input_matrix[t][i], buffer_input_matrix[t][tempM + i], buffer_input_matrix[t][2 * tempM + i]);
					}
				}
				buffer_input_matrix[0][0] = 0;// need to add conditional there
				buffer_input_matrix[0][3 * tempM - 1] = 0;// need to add conditional there
#ifdef USE_MPIR
				mpf_set_default_prec(128);
				mpf_t temp_0;
				mpf_init(temp_0);
				mpf_t temp_1;
				mpf_init(temp_1);
				for (uint64_t i = 0; i < configuration.size[0]; i++) {
					mpf_set_d(temp_0, 1);
					mpf_set_d(temp_1, buffer_input_matrix[0][tempM + i]);
					mpf_div(temp_0, temp_0, temp_1);
					buffer_input_matrix_gpu[0][tempM + reorder_i(i, configuration.size[0], 32, used_registers)] = mpf_get_d(temp_0);

					mpf_set_d(temp_0, buffer_input_matrix[0][i]);
					mpf_set_d(temp_1, buffer_input_matrix_gpu[0][tempM + reorder_i(i, configuration.size[0], 32, used_registers)]);
					mpf_mul(temp_0, temp_0, temp_1);
					buffer_input_matrix_gpu[0][reorder_i(i, configuration.size[0], 32, used_registers)] = mpf_get_d(temp_0);

					mpf_set_d(temp_0, buffer_input_matrix[0][2 * tempM + i]);
					mpf_set_d(temp_1, buffer_input_matrix_gpu[0][tempM + reorder_i(i, configuration.size[0], 32, used_registers)]);
					mpf_mul(temp_0, temp_0, temp_1);
					buffer_input_matrix_gpu[0][2 * tempM + reorder_i(i, configuration.size[0], 32, used_registers)] = mpf_get_d(temp_0);
				}
				mpf_clear(temp_0);
				mpf_clear(temp_1);
#else
				for (uint64_t i = 0; i < configuration.size[0]; i++) {
					buffer_input_matrix_gpu[0][tempM + reorder_i(i, configuration.size[0], 32, used_registers)] = 1.0 / buffer_input_matrix[0][tempM + i];// buffer_input_matrix_gpu[t][reorder_i(i, tempM, 32, used_registers)];
					buffer_input_matrix_gpu[0][reorder_i(i, configuration.size[0], 32, used_registers)] = buffer_input_matrix[0][i] * buffer_input_matrix_gpu[0][tempM + reorder_i(i, configuration.size[0], 32, used_registers)];// buffer_input_matrix_gpu[t][reorder_i(i, tempM, 32, used_registers)];
					buffer_input_matrix_gpu[0][2 * tempM + reorder_i(i, configuration.size[0], 32, used_registers)] = buffer_input_matrix[0][2 * tempM + i] * buffer_input_matrix_gpu[0][tempM + reorder_i(i, configuration.size[0], 32, used_registers)];// buffer_input_matrix_gpu[t][reorder_i(i, tempM, 32, used_registers)];
				}
#endif
				double* buffer_input_systems = (double*)malloc(bufferSolveResSize);
				//double* buffer_input_systems2 = (double*)malloc(bufferSolveResSize);
				for (uint64_t j = 0; j < configuration.size[1]; j++) {
					for (uint64_t i = 0; i < configuration.size[0]; i++) {
						buffer_input_systems[i + j * configuration.size[0]] = (double)(2 * ((double)rand()) / RAND_MAX - 1.0);//x0[i];
						//buffer_input_systems[i + j * configuration.size[0]] = buffer_input_systems2[i + j * configuration.size[0]];//x0[i];// (float)(2 * ((float)rand()) / RAND_MAX - 1.0);// +i + j * configuration.size[0];// (float)(2 * ((float)rand()) / RAND_MAX - 1.0);
					}
				}

				//buffer_input_systems[0] = 0.69;
				//buffer_input_systems[1] = 0.23;
				//Sample buffer transfer tool. Uses staging buffer of the same size as destination buffer, which can be reduced if transfer is done sequentially in small buffers.
#if(VKFFT_BACKEND==0)
				resFFT = transferDataFromCPU(vkGPU, buffer_input_matrix_gpu, &bufferSolve, bufferSolveSize);
				if (resFFT != PFSOLVE_SUCCESS) return resFFT;
				resFFT = transferDataFromCPU(vkGPU, buffer_input_systems, &bufferSolveRes, bufferSolveResSize);
				if (resFFT != PFSOLVE_SUCCESS) return resFFT;
#elif(VKFFT_BACKEND==1)
				for (int t = 0; t < configuration.numConsecutiveJWIterations; t++) {
					res = cudaMemcpy(bufferSolve[t], buffer_input_matrix_gpu[t], bufferSolveSize, cudaMemcpyHostToDevice);
					if (res != cudaSuccess) return PFSOLVE_ERROR_FAILED_TO_COPY;
				}
				res = cudaMemcpy(bufferSolveRes, buffer_input_systems, bufferSolveResSize, cudaMemcpyHostToDevice);
				if (res != cudaSuccess) return PFSOLVE_ERROR_FAILED_TO_COPY;
#elif(VKFFT_BACKEND==2)
				for (int t = 0; t < configuration.numConsecutiveJWIterations; t++) {
					res = hipMemcpy(bufferSolve[t], buffer_input_matrix_gpu[t], bufferSolveSize, hipMemcpyHostToDevice);
					if (res != hipSuccess) return PFSOLVE_ERROR_FAILED_TO_COPY;
				}
				res = hipMemcpy(bufferSolveRes, buffer_input_systems, bufferSolveResSize, hipMemcpyHostToDevice);
				if (res != hipSuccess) return PFSOLVE_ERROR_FAILED_TO_COPY;
#elif(VKFFT_BACKEND==3)
				res = clEnqueueWriteBuffer(vkGPU->commandQueue, bufferSolve, CL_TRUE, 0, bufferSolveSize, buffer_input_matrix_gpu, 0, NULL, NULL);
				if (res != CL_SUCCESS) return PFSOLVE_ERROR_FAILED_TO_COPY;
				res = clEnqueueWriteBuffer(vkGPU->commandQueue, bufferSolveRes, CL_TRUE, 0, bufferSolveResSize, buffer_input_systems, 0, NULL, NULL);
				if (res != CL_SUCCESS) return PFSOLVE_ERROR_FAILED_TO_COPY;
#endif
				for (uint64_t i = 0; i < 1 * configuration.size[0]; i++) {
					//buffer_input_matrix[2 * configuration.size[0] + i] = 1/ buffer_input_matrix[2 * configuration.size[0] + i];// (float)(2 * ((float)rand()) / RAND_MAX - 1.0);
					//printf("%f\n", buffer_input_matrix[2 * configuration.size[0] + i]);
				}
#ifdef USE_MPIR
				mpf_set_default_prec(128);
				mpf_t temp;
				mpf_init(temp);
				mpf_set_d(temp, 0);
				mpf_t temp0;
				mpf_init(temp0);
				mpf_set_d(temp0, 0);
				mpf_t temp1;
				mpf_init(temp1);
				mpf_set_d(temp1, 0);

				mpf_t* ress0 = (mpf_t*)malloc(sizeof(mpf_t) * configuration.size[0] * configuration.size[1]);
				mpf_t* input0 = (mpf_t*)malloc(sizeof(mpf_t) * configuration.size[0] * configuration.size[1]);
				mpf_t* buffer_input_matrix0 = (mpf_t*)malloc(4 * sizeof(mpf_t) * configuration.size[0]);
				mpf_t* temp_matrix0 = (mpf_t*)malloc(4 * sizeof(mpf_t) * configuration.size[0]);
				for (uint64_t j = 0; j < configuration.size[0] * configuration.size[1]; j++) {
					mpf_init(ress0[j]);
					mpf_init(input0[j]);
					mpf_set_d(input0[j], buffer_input_systems[j]);
				}
				for (uint64_t j = 0; j < 3 * configuration.size[0]; j++) {
					mpf_init(buffer_input_matrix0[j]);
					mpf_set_d(buffer_input_matrix0[j], buffer_input_matrix[0][j]);
				}
				for (uint64_t j = 0; j < 3 * configuration.size[0]; j++) {
					mpf_init(temp_matrix0[j]);
				}
				mpf_div(temp_matrix0[2 * tempM], buffer_input_matrix0[2 * tempM], buffer_input_matrix0[tempM]);
				mpf_div(ress0[0], input0[0], buffer_input_matrix0[tempM]);
				for (uint64_t j = 1; j < configuration.size[0]; j++) {
					mpf_mul(temp, buffer_input_matrix0[j], temp_matrix0[2 * tempM + j - 1]);
					mpf_sub(temp, buffer_input_matrix0[tempM + j], temp);
					mpf_div(temp_matrix0[2 * tempM + j], buffer_input_matrix0[2 * tempM + j], temp);

					mpf_mul(temp, buffer_input_matrix0[j], temp_matrix0[2 * tempM + j - 1]);
					mpf_sub(temp, buffer_input_matrix0[tempM + j], temp);
					mpf_mul(temp0, buffer_input_matrix0[j], ress0[j - 1]);
					mpf_sub(temp0, input0[j], temp0);
					mpf_div(ress0[j], temp0, temp);
				}

				for (int64_t j = tempM - 2; j >= 0; j--) {
					mpf_mul(temp, temp_matrix0[2 * tempM + j], ress0[j + 1]);
					mpf_sub(ress0[j], ress0[j], temp);
				}
				tempM = configuration.size[0];
				double* temp_matrix = (double*)malloc(bufferSolveSize);
				double* ress = (double*)malloc(bufferSolveResSize);
				double* ress2 = (double*)malloc(bufferSolveResSize);
				double* input = buffer_input_systems;

				temp_matrix[2 * tempM] = buffer_input_matrix[0][2 * tempM] / buffer_input_matrix[0][tempM];
				ress2[0] = input[0] / buffer_input_matrix[0][tempM];
				for (int64_t j = 1; j < tempM; j++) {
					temp_matrix[2 * tempM + j] = buffer_input_matrix[0][2 * tempM + j] / (buffer_input_matrix[0][tempM + j] - buffer_input_matrix[0][j] * temp_matrix[2 * tempM + j - 1]);
					ress2[j] = (input[j] - buffer_input_matrix[0][j] * ress2[j - 1]) / (buffer_input_matrix[0][tempM + j] - buffer_input_matrix[0][j] * temp_matrix[2 * tempM + j - 1]);
				}

				for (int64_t j = tempM - 2; j >= 0; j--) {
					ress2[j] = ress2[j] - temp_matrix[2 * tempM + j] * ress2[j + 1];
				}

				for (uint64_t j = 0; j < configuration.size[0]; j++) {
					ress[j] = mpf_get_d(ress0[j]);
				}
				mpf_clear(temp);
				mpf_clear(temp0);
				mpf_clear(temp1);
				for (uint64_t j = 0; j < configuration.size[0]; j++) {
					mpf_clear(ress0[j]);
					mpf_clear(input0[j]);
				}
				for (uint64_t j = 0; j < 3 * configuration.size[0]; j++) {
					mpf_clear(buffer_input_matrix0[j]);
					mpf_clear(temp_matrix0[j]);
				}
				free(ress0);
				free(input0);
				free(buffer_input_matrix0);
				free(temp_matrix0);
#else
				/*tempM = configuration.size[0];
				double* temp_matrix = (double*)malloc(bufferSolveSize);
				double* ress = (double*)malloc(bufferSolveResSize);
				double* ress2 = (double*)malloc(bufferSolveResSize);
				double* input = buffer_input_systems;

				temp_matrix[2 * tempM] = buffer_input_matrix[0][2 * tempM] / buffer_input_matrix[0][tempM];
				ress[0] = input[0] / buffer_input_matrix[0][tempM];
				for (int64_t j = 1; j < tempM; j++) {
					temp_matrix[2 * tempM + j] = buffer_input_matrix[0][2 * tempM + j] / (buffer_input_matrix[0][tempM + j] - buffer_input_matrix[0][j] * temp_matrix[2 * tempM + j - 1]);
					ress[j] = (input[j] - buffer_input_matrix[0][j] * ress[j - 1]) / (buffer_input_matrix[0][tempM + j] - buffer_input_matrix[0][j] * temp_matrix[2 * tempM + j - 1]);
				}

				for (int64_t j = tempM - 2; j >= 0; j--) {
					ress[j] = ress[j] - temp_matrix[2 * tempM + j] * ress[j + 1];
				}
				for (int64_t j = 0; j < tempM; j++) {
					ress2[j] = ress[j];
				}*/
#endif
				// 
				//PfSolve_AppLibrary appLibrary = {};
				PfSolveApplication* tempApp = 0;

				/*if (configuration.JW_sequential) {
					PfSolve_MapKey_JonesWorland_sequential mapKey = {};
					mapKey.size[0] = configuration.size[0];
					mapKey.size[1] = configuration.size[1];
					mapKey.outputBufferStride = configuration.outputBufferStride[0];
					mapKey.offsetSolution = configuration.offsetSolution;
					resFFT = checkLibrary_JonesWorland_sequential(&appLibrary, mapKey, &tempApp);
					if (resFFT != PFSOLVE_SUCCESS) return resFFT;
					//Initialize applications. This function loads shaders, creates pipeline and configures FFT based on configuration file. No buffer allocations inside PfSolve library.
					if (!tempApp) {
						resFFT = initializePfSolve(&app, configuration);
						if (resFFT != PFSOLVE_SUCCESS) return resFFT;
						resFFT = addToLibrary_JonesWorland_sequential(&appLibrary, mapKey, &app);
						if (resFFT != PFSOLVE_SUCCESS) return resFFT;
					}
					else {
						app = tempApp[0];
					}
				}*/
				/*PfSolve_MapKey_JonesWorland mapKey = {};
				mapKey.size[0] = configuration.size[0];
				mapKey.size[1] = configuration.size[1];
				mapKey.outputBufferStride = configuration.outputBufferStride[0];
				mapKey.offsetSolution = configuration.offsetSolution;
				resFFT = checkLibrary_JonesWorland(&appLibrary, mapKey, &tempApp);*/
				//Initialize applications. This function loads shaders, creates pipeline and configures FFT based on configuration file. No buffer allocations inside PfSolve library.  
				if (!tempApp) {
					resFFT = initializePfSolve(&app, configuration);
					if (resFFT != PFSOLVE_SUCCESS) return resFFT;
					//resFFT = addToLibrary_JonesWorland(&appLibrary, mapKey, &app);
					//if (resFFT != PFSOLVE_SUCCESS) return resFFT;
				}
				else {
					app = tempApp[0];
				}

				//Submit FFT+iFFT.
				uint64_t num_iter = 1;
				double totTime = 0;
				//cusparseHandle_t handle;
				//cusparseStatus_t resS= CUSPARSE_STATUS_SUCCESS;
				//resS= cusparseCreate(&handle);
				float* asas = 0;
				//res = cudaMalloc((void**)&asas, 128*100000);
				//resS = cusparseSgtsv2_nopivot(handle, 111, 10000, bufferSolve, bufferSolve, bufferSolve, bufferSolveRes, 111, asas);
				PfSolveLaunchParams launchParams = {};
#if(VKFFT_BACKEND==0)
				launchParams.buffer = &bufferSolve;
				launchParams.outputBuffer = &bufferSolveRes;
#elif(VKFFT_BACKEND==1)
				launchParams.buffer = (void**)bufferSolve;
				launchParams.outputBuffer = (void**)&bufferSolveRes;
#elif(VKFFT_BACKEND==2)
				launchParams.buffer = (void**)bufferSolve;
				launchParams.outputBuffer = (void**)&bufferSolveRes;
#elif(VKFFT_BACKEND==3)
				launchParams.buffer = &bufferSolve;
				launchParams.outputBuffer = &bufferSolveRes;
#endif
				//launchParams.offsetV = 2 * configuration.size[0];
				launchParams.offsetM = 0;
				launchParams.offsetV = 0;
				launchParams.offsetSolution = 0;
				launchParams.inputZeropad[0] = 0;
				launchParams.inputZeropad[1] = configuration.M_size;
				//launchParams.inputZeropad[1]--;
				launchParams.outputZeropad[0] = 0;
				launchParams.outputZeropad[1] = configuration.M_size;
				launchParams.outputBufferStride = configuration.M_size;
				launchParams.inputBufferStride = configuration.M_size;
				launchParams.scaleC = 1.0;

				double totTime2 = 0;
				num_iter = (100000/1000);
				if (num_iter <= 1) num_iter = 10;
				if (num_iter >= 1000) num_iter = 1000;
				//num_iter = 1;
				resFFT = performVulkanFFT(vkGPU, &app, &launchParams, 0, num_iter, &totTime2);
				if (resFFT != PFSOLVE_SUCCESS) return resFFT;
				
				run_time[r] = totTime2 / num_iter;
				if (n > 0) {
					if (r == num_runs - 1) {
						double std_error = 0;
						double avg_time = 0;
						for (uint64_t t = 0; t < num_runs; t++) {
							avg_time += run_time[t];
						}
						avg_time /= num_runs;
						for (uint64_t t = 0; t < num_runs; t++) {
							std_error += (run_time[t] - avg_time) * (run_time[t] - avg_time);
						}
						std_error = sqrt(std_error / num_runs);
						printf("%" PRIu64 " %" PRIu64 " %" PRIu64 " Buffer: %.3f MB - time %.3e us std_error %.3e | %.1f %% us num_iter: %" PRIu64 " bandwidth: %.3f GB/s\n", n, 5000, configuration.numConsecutiveJWIterations, bufferSolveResSize / 1024.0 / 1024.0, avg_time * 1000, std_error * 1000, 100 * std_error / avg_time, num_iter, 2 * bufferSolveResSize / 1024.0 / 1024.0 / 1.024 / avg_time);
					}


				}


				//printf("%d %.3e %.3e - %.3e %.3e\n", configuration.size[0], (double)(resGPUSUM / (configuration.size[0] * configuration.size[1])), (double)(resCPUSUM / (configuration.size[0] * configuration.size[1])), (double)resGPUMAX, (double)resCPUMAX);
				//printf("%d %d %d - %.6f time %d = %.6f\n", n, t, num_iter, totTime2/num_iter);
				//printf("size  = %d MB, time at peak bw = %f ms\n", 2*bufferSolveResSize/1024/1024, 2*bufferSolveResSize/1024.0/1024.0/1024.0/1200.0*1000.0);
				free(buffer_input_systems);
				//free(buffer_input_systems2);
				for (int i = 0; i < configuration.numConsecutiveJWIterations; i++) {
					free(buffer_input_matrix[i]);
					free(buffer_input_matrix_gpu[i]);
				}
				//free(ress);
				//free(ress2);
#if(VKFFT_BACKEND==0)
				vkDestroyBuffer(vkGPU->device, bufferSolve, NULL);
				vkFreeMemory(vkGPU->device, bufferSolveDeviceMemory, NULL);
				vkDestroyBuffer(vkGPU->device, bufferSolveRes, NULL);
				vkFreeMemory(vkGPU->device, bufferSolveResDeviceMemory, NULL);
#elif(VKFFT_BACKEND==1)
				for (int i = 0; i < configuration.numConsecutiveJWIterations; i++) {
					cudaFree(bufferSolve[i]);
				}
				cudaFree(bufferSolveRes);
#elif(VKFFT_BACKEND==2)
				for (int i = 0; i < configuration.numConsecutiveJWIterations; i++) {
					hipFree(bufferSolve[i]);
				}
				hipFree(bufferSolveRes);
#elif(VKFFT_BACKEND==3)
				clReleaseMemObject(bufferSolve);
				clReleaseMemObject(bufferSolveRes);
#endif
				if (!tempApp) {
					deletePfSolve(&app);
				}

			}
			/*if (n < 128) {
				n += 16;
			}
			else if (n < 512) {
				n += 32;
			}
			else if (n < 2048) {
				n += 64;
			}
			else{
				n += 256;
			}*/
		}
	}
	return resFFT;
}
